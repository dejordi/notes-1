15.1
function Min(T, n)
   minimum := T[1]
      for i := 2 to n
         if T[i] < minimum
            minimum := T[i]
   return minimum

15.2
function MinP(T, k, l)
   minimum := T[k]
   for i := k + 1 to l
      if T[i] < minimum
         minimum := T[i]
   return minimum

15.3
function MinI(T, k, l)
   minimum := T[k]
   index := k
   for i := k + 1 to l
      if T[i] < minimum
         minimum := T[i]
         index := i
   return index

15.4
procedure Swap(T, k, l)
   temp := T[k]
   T[k] := T[l]
   T[l] := temp

** Aktualnie można to zrobić jakimiś bramkami logicznymi,
wpiszczcie sobie w internet to znajdziecie obrazek, jak przeanalizujecie
to zobaczycie, że ma sens

15.5
function Counter(T, n)
   for i := 1 to n
      H[T[i]] := 1

   sum := 0
   for i := 1 to n
      sum := sum + H[i]

   return sum

15.6
function CounterExtended(T, n)
   count := 0
   for i := 1 to n
      toAdd := 1
      for j := 1 to count
         if T[i] = H[j]
            toAdd := 0
            break
      if toAdd = 1
         count := count + 1
         H[count] := T[i]
   return count

15.7
function Mode(T, n)
   cA := 1
   cB := 1
   dom := T[1]
   for i := 2 to n
      if T[i] != T[i - 1]
         if cB > cA
            cA := cB
            dom := T[i - 1]
            cB := 0
         else if cB = cA
            dom := nil
            cB := 0
      cB := cB + 1
   return dom

15.8
function Evaluate(T, n, x)
   wyr := 0
   for i := 1 to n
      wyr := wyr + T[i] * Power(x, n - i)
   return wyr

15.9
chuj nie chce mi sobie

15.10
procedure SortMin(T, n)
   for i := 1 to n
      Swap(T[i], T[MinI(T, i, n)])

15.11
chuj też mi się nie chce

15.12
procedure InsertionSort(T, q, l)
   for i ← q + 1 to l
      k ← T[i]
      j ← i − 1
      while j > q - 1 and T[j] > k
         T[j + 1] ← T[j]
         j ← j − 1
         T[j + 1] ← k
